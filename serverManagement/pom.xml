<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.1</version>
<!--        <version>3.0.7</version>-->
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.chace</groupId>
    <artifactId>serverManagement</artifactId>
    <version>1.1</version>

    <!-- for wildfly deployment -->
<!--    <packaging>war</packaging>-->
    <!-- END for wildfly deployment -->

    <name>serverManagement</name>
    <description>Servers Status Management System</description>

    <properties>
        <java.version>17</java.version>
        <maven.test.skip>true</maven.test.skip>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>

            <!-- for wildfly deployment -->
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>

                <!--                <exclusion>-->
                <!--                    <groupId>ch.qos.logback</groupId>-->
                <!--                    <artifactId>logback-classic</artifactId>-->
                <!--                </exclusion>-->
            </exclusions>
            <!-- END for wildfly deployment -->
        </dependency>




        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
        </dependency>

        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>

            <!-- EXCLUDE embedded tomcat when we want to deploy on  wildfly -->
            <!--            <exclusions>-->
            <!--                <exclusion>-->
            <!--                    <groupId>org.springframework.boot</groupId>-->
            <!--                    <artifactId>spring-boot-starter-tomcat</artifactId>-->
            <!--                </exclusion>-->
            <!--            </exclusions>-->
            <!-- END EXCLUDE embedded tomcat when we want to deploy on  wildfly -->

        </dependency>

        <!-- wildfly deploy : SINCE wildfly 28 USES JAKARTA  -->
<!--        <dependency>-->
<!--            <groupId>jakarta.servlet</groupId>-->
<!--            <artifactId>jakarta.servlet-api</artifactId>-->
<!--            <scope>provided</scope>-->
<!--        </dependency>-->
        <!-- end wildfly deploy -->

        <!--  use  log4j2 logger    -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>

        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>


<!--        <dependency>-->
<!--            <groupId>org.projectlombok</groupId>-->
<!--            <artifactId>lombok</artifactId>-->
<!--            <optional>true</optional>-->
<!--        </dependency>-->

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
            <optional>true</optional>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Object mapping framework :: https://mvnrepository.com/artifact/org.mapstruct/mapstruct -->
<!--        <dependency>-->
<!--            <groupId>org.mapstruct</groupId>-->
<!--            <artifactId>mapstruct</artifactId>-->
<!--            <version>${mapstruct.version}</version>-->
<!--        </dependency>-->
        <!-- https://mvnrepository.com/artifact/org.modelmapper/modelmapper -->
        <dependency>
            <groupId>org.modelmapper</groupId>
            <artifactId>modelmapper</artifactId>
            <version>3.2.0</version>
        </dependency>


        <!-- security needs -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>4.4.0</version>
        </dependency>

        <!-- store JSON (Collection of) Object in JPA Entity using JPA and Hibernate 6 >  https://vladmihalcea.com/how-to-map-json-collections-using-jpa-and-hibernate/-->
<!--        <dependency>-->
<!--            <groupId>io.hypersistence</groupId>-->
<!--            <artifactId>hypersistence-utils-hibernate-60</artifactId>-->
<!--            <version>3.7.6</version>-->
<!--        </dependency>-->

<!--        <dependency>-->
<!--            <groupId>com.fasterxml.jackson.module</groupId>-->
<!--            <artifactId>jackson-module-jakarta-xmlbind-annotations</artifactId>-->
<!--            <version>2.17.1</version>-->
<!--        </dependency>-->
        <!-- END store JSON (Collection of) Object in JPA Entity using JPA and Hibernate >  https://vladmihalcea.com/how-to-map-json-collections-using-jpa-and-hibernate/-->

    </dependencies>

    <build>
        <finalName>manageServers</finalName>

        <plugins>

            <!--wildfly deploy -->
<!--            <plugin>-->
<!--                <groupId>org.wildfly.plugins</groupId>-->
<!--                <artifactId>wildfly-maven-plugin</artifactId>-->
<!--                <version>4.0.0.Final</version>-->
<!--            </plugin>-->
            <!-- end wildfly deploy -->

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>


            <!-- this plugin generates metamodel to be used inside our specification based queries -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <annotationProcessorPath>
                            <groupId>org.hibernate.orm</groupId>
                            <artifactId>hibernate-processor</artifactId>
                            <version>7.0.0.Alpha1</version>
                        </annotationProcessorPath>

                        <!-- we need to include also lombok to be processed at compile time to recognize lombon stuff -->
                        <annotationProcessorPath>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </annotationProcessorPath>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>


        </plugins>
    </build>

</project>
